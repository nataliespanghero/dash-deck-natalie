# AUTO GENERATED FILE - DO NOT EDIT

import typing  # noqa: F401
import numbers # noqa: F401
from typing_extensions import TypedDict, NotRequired, Literal # noqa: F401
from dash.development.base_component import Component, _explicitize_args
try:
    from dash.development.base_component import ComponentType # noqa: F401
except ImportError:
    ComponentType = typing.TypeVar("ComponentType", bound=Component)


class DeckGL(Component):
    """A DeckGL component.
This component lets you visualizes PyDeck and deck/json files
directly in Dash. It also exposes various events (such as click,
hover and drag) inside callbacks.

Keyword arguments:

- id (string; optional):
    The ID used to identify this component in Dash callbacks.

- clickEvent (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  This prop is updated when an element in the map is
    clicked. This contains  the original gesture event (in JSON).

- clickInfo (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  This prop is updated when an element in the map is
    clicked. This contains  the picking info describing the object
    being clicked.  Complete description here:
    https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object.

- data (dict | string; optional):
    Your map using the Deck.gl JSON format. This can be generated by
    calling  `pdk.Deck(...).to_json()`. Both a Python dictionary and a
    JSON-string your map is accepted.

- disableContext (boolean; default False):
    This is a boolean value (e.g. `True`, `False`)  indicating whether
    or not to disable the default context menu  that shows up when
    right clicking on the map. If set to `True`, right clicking to
    rotate  a map or adjust its pitch will not trigger the default
    context menu.

- dragEndEvent (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  This prop is updated when the user releases from
    dragging the canvas. This contains  the original gesture event (in
    JSON).

- dragEndInfo (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  This prop is updated when the user releases from
    dragging the canvas. This contains  the picking info describing
    the object being dragged.  Complete description here:
    https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object.

- dragStartEvent (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  To use this, make sure that `enableEvents` is set to
    `True`, or that `enableEvents` is a list that contains this event
    type.   This prop is updated when the user starts dragging on the
    canvas. This contains  the original gesture event (in JSON).

- dragStartInfo (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  This prop is updated when the user starts dragging on
    the canvas. This contains  the picking info describing the object
    being dragged.  Complete description here:
    https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object.

- enableEvents (list of strings | boolean; default False):
    Either a boolean indicating if all event callbacks should be
    enabled, or a list of strings  indicating which ones should be
    used. If it's a list, you will need to specify one of the
    following gestures: `click`, `dragStart`, `dragEnd`, `hover`.

- hoverEvent (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  This prop is updated when an element in the map is
    hovered. This contains  the original gesture event (in JSON).

- hoverInfo (dict; optional):
    Read-only prop. To use this, make sure that `enableEvents` is set
    to `True`, or that `enableEvents` is a list that contains this
    event type.  This prop is updated when an element in the map is
    hovered. This contains  the picking info describing the object
    being hovered.  Complete description here:
    https://deck.gl/docs/developer-guide/interactivity#the-picking-info-object.

- mapboxKey (string; optional):
    You will need a mapbox token to use deck.gl. Please create a
    mapbox  and follow the instructions here:
    https://docs.mapbox.com/help/how-mapbox-works/access-tokens/.

- spec (dict; optional)

- tooltip (dict | boolean; default False):
    This can be a boolean value (e.g. `True`, `False`) to display the
    default tooltip.  You can also give a dictionary specifying an
    `html` template and custom style using `css`. For more
    information about templating, see: https://pydeck.gl/tooltip.html."""
    _children_props = []
    _base_nodes = ['children']
    _namespace = 'dash_deck'
    _type = 'DeckGL'

    @_explicitize_args
    def __init__(
        self,
        data: typing.Optional[typing.Union[dict, str]] = None,
        id: typing.Optional[typing.Union[str, dict]] = None,
        style: typing.Optional[typing.Any] = None,
        spec: typing.Optional[dict] = None,
        enableEvents: typing.Optional[typing.Union[typing.Sequence[str], bool]] = None,
        tooltip: typing.Optional[typing.Union[dict, bool]] = None,
        mapboxKey: typing.Optional[str] = None,
        disableContext: typing.Optional[bool] = None,
        clickEvent: typing.Optional[dict] = None,
        clickInfo: typing.Optional[dict] = None,
        hoverEvent: typing.Optional[dict] = None,
        hoverInfo: typing.Optional[dict] = None,
        dragStartEvent: typing.Optional[dict] = None,
        dragStartInfo: typing.Optional[dict] = None,
        dragEndEvent: typing.Optional[dict] = None,
        dragEndInfo: typing.Optional[dict] = None,
        **kwargs
    ):
        self._prop_names = ['id', 'clickEvent', 'clickInfo', 'data', 'disableContext', 'dragEndEvent', 'dragEndInfo', 'dragStartEvent', 'dragStartInfo', 'enableEvents', 'hoverEvent', 'hoverInfo', 'mapboxKey', 'spec', 'style', 'tooltip']
        self._valid_wildcard_attributes =            []
        self.available_properties = ['id', 'clickEvent', 'clickInfo', 'data', 'disableContext', 'dragEndEvent', 'dragEndInfo', 'dragStartEvent', 'dragStartInfo', 'enableEvents', 'hoverEvent', 'hoverInfo', 'mapboxKey', 'spec', 'style', 'tooltip']
        self.available_wildcard_properties =            []
        _explicit_args = kwargs.pop('_explicit_args')
        _locals = locals()
        _locals.update(kwargs)  # For wildcard attrs and excess named props
        args = {k: _locals[k] for k in _explicit_args}

        super(DeckGL, self).__init__(**args)
